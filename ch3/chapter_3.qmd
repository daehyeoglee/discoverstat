---
title: "Chapter 3"
author: "Daehyeog Lee"
date: "2023-08-30"
date-modified: "`r Sys.Date()`"
format: html
editor: visual
---

# Chapter 3. The R environment

## 3.1. What will this chapter tell me?

-   Exploring how **R** works

-   Key windows in **R**

## 3.2. Before you start

The **CRAN** (Comprehensive R Archive Network) is central to using **R**.

**R** can be expanded by downloading **packages** that add specific functionality to the program.

## 3.3. Getting started

Three windows of **R**: **Console**, **Editor**, **Graphics** ('**Quartz**' in Mac)

## 3.4. Using R

### 3.4.1. Commands, objects and functions

`Object <- function`

We call this **"Object is created from function"**.

**Object** is anything created in **R** (single values, collections of information, etc.).

**Function** is a method in **R** to create the object.

A *concatenate function*, or `c()`, groups things together.

```{r}
metallica <- c("Lars", "James", "Jason", "Kirk")
metallica
metallica <- metallica[metallica != "Jason"]
metallica
metallica <- c(metallica, "Rob")
metallica
```

```{r}
jeonlab <- c("prof_Jeon", "HD", "TH", "MH", "JT")
jeonlab
jeonlab <- c(jeonlab, "DH")
jeonlab
jeonlab <- jeonlab[jeonlab != "DH"]
jeonlab
jeonlab <- c("DH", jeonlab)
jeonlab
```

We can remove the element by using `!=`.

### 3.4.6. Getting Help

We can get help by executing the `help(function)` or `?function` command.

## 3.5. Getting data into R

### 3.5.1. Creating variables

```{r}
metallicaNames <- c("Lars", "James", "Kirk", "Rob")
metallicaAges <- c(47, 47, 48, 46)
```

**String variables** (`metallicaNames`) consist of data that are text. They should always be placed in quotes.

**Numeric variables** (`metallicaAges`) contain data that are numbers. They are never placed in quotes.

### 3.5.2. Creating dataframes

We can combine variables into a single object by creating a **dataframe**.

Dataframe are created by `data.frame()` function.

The `names()` function lists the variables in the dataframe.

```{r}
metallica <- data.frame(Name = metallicaNames, Age = metallicaAges)
metallica
metallica$Age
metallica$Name
metallica$childAge <- c(12, 12, 4, 6)
metallica
names(metallica)
```

In this dataframe, `metallica` contains two variables (Name and Age).

The `list()` function creates a list of separate objects.

We can also use `cbind()` function instead of the `data.frame()` function to combine the data.

```{r}
metallicalist <- list(metallicaNames, metallicaAges)
metallicalist
metallica
metallicacbind <- cbind(metallicaNames, metallicaAges)
metallicacbind
```

The interesting feature of `cbind()` is that the numbers from the output are in quotes.

`cbind()` is most useful for combining variables of the same type, while `data.frame()` is useful for storing variables of different types together.

### 3.5.3. Calculating new variables from existing ones

We might want to create new variable from the existing ones.

```{r}
metallica$fatherhoodAge <- metallica$Age - metallica$childAge
metallica
```

We created a new variable (**fatherhoodAge**), which is a difference of age between each member and their child.

### 3.5.4. Organizing your data

#### 3.5.4.1. Creating a string variable

Let's create a variable called **name** as follows:

```{r}
name <- c("Ben", "Martin", "Andy", "Paul", "Graham", "Carina",
          "Karina", "Doug", "Mark", "Zoe")
```

#### 3.5.4.2. Creating a date variable

We can convert dates written as text into date objects using the `as.Date()` function.

`as.Date()` function takes strings of text and converts them into dates.

```{r}
husband <- c("1973-06-21", "1970-07-16", "1949-10-08", "1969-05-24")
wife <- c("1984-11-12", "1973-08-02", "1948-11-11", "1983-07-23")
#agegap <- husband - wife # This gives an error message!
```

By using `as.Date()` function, we can subtract dates from one another.

```{r}
husband <- as.Date(c("1973-06-21", "1970-07-16", "1949-10-08", "1969-05-24"))
wife <- as.Date(c("1984-11-12", "1973-08-02", "1948-11-11", "1983-07-23"))
agegap <- husband - wife
agegap
```

Below, we created a variable called **birth_date** containing the dates of birth.

```{r}
birth_date <- as.Date(c("1977-07-03", "1969-05-24", "1973-06-21", "1970-07-16",
                        "1949-10-10", "1983-11-05", "1987-10-08", "1989-09-16",
                        "1973-05-20", "1984-11-12"))
```

#### 3.5.4.3. Creating coding variables/factors

A **coding variable** (= grouping variable = factor) is a variable that uses numbers to represent different groups of data. It is a *numeric variable*, but these numbers represent names.

Let's create a new variable **job**.

```{r}
job <- c(1,1,1,1,1,2,2,2,2,2)
job
```

We can make the above simpler by using the `rep()` function.

*rep(1, 5)* will repeat the number 1 five times.

```{r}
job <- c(rep(1, 5), rep(2, 5))
job
```

This gives us the same result.

Now, we can use the `factor()` function to turn this variable **job** into a factor.

```{r}
job <- factor(job, levels = c(1:2), labels = c("Lecturer", "Student"))
job
```

Having converted **job** to a factor, **R** will treat it as a nominal variable.

A final way to generate factors is to use the gl() function.

```{r}
job <- gl(2, 5, labels = c("Lecturer", "Student"))
job
```

The end result is a fully-fledged coding variable (or factor)

We can also see the factor levels and their order by using the `levels()` function.

```{r}
levels(job)
```

#### 3.5.4.4. Creating a numeric variable

Let's add some other variables like below.

```{r}
friends <- c(5, 2, 0, 4, 1, 10, 12, 15, 12, 17)
alcohol <- c(10, 15, 20, 5, 30, 25, 20, 16, 17, 18)
income <- c(20000, 40000, 3500, 22000, 50000, 50000, 100, 3000, 10000, 10)
neurotic <- c(10, 17, 14, 13, 21, 7, 13, 9, 14, 13)
```

Then, we can bind these together in a dataframe by using the `data.frame()` function.

```{r}
lecturerData <- data.frame(name, birth_date, job, friends,
                           alcohol, income, neurotic)
lecturerData
```

### 3.5.5 Missing values

We can fill out the missing data point by using **NA**.

Or, we can use the command *na.rm=TRUE* to tell **R** to ignore missing values before computing the mean.

```{r}
mean(metallica$childAge, na.rm = TRUE)
```

## 3.6. Entering data with R Commander

We can create and modify the coding variables with R Commander.

R Commander can be executed by `library(Rcmdr)`.

## 3.7. Using other software to edit and enter data

### 3.7.1. Importing data

We can import *.csv* files and *.txt* files by using the `read.csv()` and `read.txt()`, respectively.

Or, we can select the file from the system's dialog box by executing the `file.choose()` function.

## 3.8. Saving data

We can export data from R by using `write.table()` (for *.txt* file) or `write.csv()` (for *.csv* file) command.

## 3.9. Manipulating data

### 3.9.1. Selecting parts of a dataframe

We can separate the columns from the original dataset by executing this command:

```{r}
lecturerPersonality <- lecturerData[, c("friends", "alcohol", "neurotic")]
lecturerPersonality
```

Similarly, we can separate the rows from the original dataset.

Suppose we only want to see the data of the lecturers. We can do this by the following command:

```{r}
lecturerOnly <- lecturerData[job == "Lecturer",]
lecturerOnly
```

Moreover, we can set the specific conditions from the dataset. Imagine that we wanted to select the personality variables but only for people who drink more than 10 units of alcohol.

We can do this by executing:

```{r}
alcoholPersonality <- lecturerData[alcohol > 10, c("friends", "alcohol", "neurotic")]
alcoholPersonality
```

### 3.9.2. Selecting data with the `subset()` function

We can do the same thing by using the `subset()` function.

```{r}
lecturerOnly <- subset(lecturerData, job == "Lecturer")
alcoholPersonality <- subset(lecturerData, alcohol > 10,
                             select = c("friends", "alcohol", "neurotic"))
lecturerOnly
alcoholPersonality
```

The result would be same as 3.9.1.

### 3.9.3. Dataframes and matrices

Dataframes, what we have handled so far, is one way to store data.

Another way to store data is a **matrix**.

The main difference between a dataframe and a matrix is that a matrix can contain only numeric variables. It cannot contain string variables or dates.

We can convert a dataframe to a matrix using the `as.matrix()` function.

```{r}
alcoholPersonalityMatrix <- as.matrix(alcoholPersonality)
alcoholPersonalityMatrix
```

Defining *alcoholPersonality* inside of `as.matrix()` also returns the same outcome.

```{r}
alcoholPersonalityMatrix <- as.matrix(lecturerData[alcohol > 10,
                                                   c("friends", "alcohol", "neurotic")])
alcoholPersonalityMatrix
```

### 3.9.4. Reshaping data

Data can be contained in either **wide** format or **long** (or **molten**) format.

In **wide** format, each person's data is contained in a single row of the data.

We can set the data into wide format by executing `unstack()` or `cast()` function.

In **long (molten)** format, data on different variables are placed in a single column.

We can set the data into wide format by executing `stack()` or `melt()` function.

\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--

## Smart Alex's tasks

```{r}
### Task_2 original ###
studentNum <- c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12",
                "13", "14", "15", "16", "17", "18", "19", "20")
gender <- c(rep(1, 10), rep(2, 10))
gender <- factor(gender, levels = c(1:2), labels = c("Male", "Female"))
electricShock <- c(15, 14, 20, 13, 13, NA, NA, NA, NA, NA, 6, 7, 5, 4, 8,
                   NA, NA, NA, NA, NA)
beingNice <- c(NA, NA, NA, NA, NA, 10, 9, 8, 8, 7, NA, NA, NA, NA, NA,
               12, 10, 7, 8, 13)
scores <-data.frame(studentNum, gender, electricShock, beingNice)
scores

### Task_3 ###
subjectNum <- c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11",
                "12", "13", "14", "15", "16", "17", "18", "19", "20", "21",
                "22", "23", "24")
genders <- c(rep(1, 12), rep(2, 12))
genders <- factor(genders, levels = c(1:2), labels = c("Male", "Female"))
PF <- c(69, 76, 70, 76, 72, 65, 82, 71, 71, 75, 52, 34, 70, 74, 64, 43, 51,
        93, 48, 51, 74, 73, 41, 84)
OF <- c(33, 26, 10, 51, 34, 28, 27, 9, 33, 11, 14, 46, 97, 80, 88, 100, 100,
        58, 95, 83, 97, 89, 69, 82)
bullets <- data.frame(subjectNum, genders, PF, OF)
bullets


### Task_2 revised ###
sbj <- c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13",
         "14", "15", "16", "17", "18", "19", "20")
treated <- c(rep(1, 10), rep(2, 10))
treated <- factor(treated, levels = c(1:2),
                  labels = c("electricShock", "beingNice"))
gend <- c(rep(1, 5), rep(2, 5), rep(1, 5), rep(2, 5))
gend <- factor(gend, levels = c(1:2), labels = c("Male", "Female"))
score <- c(15, 15, 20, 13, 13, 6, 7, 5, 4, 8, 10, 9, 8, 8, 7, 12, 10, 7, 8, 13)
result <- data.frame(sbj, treated, gend, score)
result
```
